name: Build and Deploy to ECS

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image-uri: ${{ steps.build-image.outputs.image-uri }}
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION || 'us-east-2' }}

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and Push Docker image
      id: build-image
      run: |
        IMAGE_URI=${{ vars.ECR_REPOSITORY_URI }}:${{ github.sha }}
        docker build -t $IMAGE_URI .
        docker push $IMAGE_URI
        echo "image-uri=$IMAGE_URI" >> $GITHUB_OUTPUT
        
    - name: Create image URI file
      run: echo "${{ steps.build-image.outputs.image-uri }}" > image-uri.txt
      
    - name: Upload image URI
      uses: actions/upload-artifact@v4
      with:
        name: image-uri
        path: image-uri.txt

  security:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
    
    steps:
    - name: Download image URI
      uses: actions/download-artifact@v4
      with:
        name: image-uri
        
    - name: Set image URI
      id: image
      run: echo "uri=${{ needs.build.outputs.image-uri }}" >> $GITHUB_OUTPUT
      
    - name: Set up AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION || 'us-east-2' }}

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Pull Docker image for scanning
      run: docker pull ${{ steps.image.outputs.uri }}
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.image.outputs.uri }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  deploy:
    needs: [build, security]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION || 'us-east-2' }}

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ./task-definition.json
        container-name: ${{ vars.CONTAINER_NAME }}
        image: ${{ needs.build.outputs.image-uri }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ vars.ECS_SERVICE }}
        cluster: ${{ vars.ECS_CLUSTER }}
        wait-for-service-stability: true

  notify:
    needs: [build, security, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Debug Slack Webhook
      run: |
        if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
          echo "Slack webhook URL is set"
        else
          echo "Slack webhook URL is not set"
        fi
        
    - name: Slack Notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          ECS Deployment ${{ job.status }}
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Image: ${{ needs.build.outputs.image-uri }}
          Service: ${{ vars.ECS_SERVICE }}
          Cluster: ${{ vars.ECS_CLUSTER }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: env.SLACK_WEBHOOK_URL != ''
      #